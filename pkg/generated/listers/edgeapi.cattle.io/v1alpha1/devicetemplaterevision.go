/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cnrancher/edge-api-server/pkg/apis/edgeapi.cattle.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceTemplateRevisionLister helps list DeviceTemplateRevisions.
type DeviceTemplateRevisionLister interface {
	// List lists all DeviceTemplateRevisions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplateRevision, err error)
	// DeviceTemplateRevisions returns an object that can list and get DeviceTemplateRevisions.
	DeviceTemplateRevisions(namespace string) DeviceTemplateRevisionNamespaceLister
	DeviceTemplateRevisionListerExpansion
}

// deviceTemplateRevisionLister implements the DeviceTemplateRevisionLister interface.
type deviceTemplateRevisionLister struct {
	indexer cache.Indexer
}

// NewDeviceTemplateRevisionLister returns a new DeviceTemplateRevisionLister.
func NewDeviceTemplateRevisionLister(indexer cache.Indexer) DeviceTemplateRevisionLister {
	return &deviceTemplateRevisionLister{indexer: indexer}
}

// List lists all DeviceTemplateRevisions in the indexer.
func (s *deviceTemplateRevisionLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplateRevision, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceTemplateRevision))
	})
	return ret, err
}

// DeviceTemplateRevisions returns an object that can list and get DeviceTemplateRevisions.
func (s *deviceTemplateRevisionLister) DeviceTemplateRevisions(namespace string) DeviceTemplateRevisionNamespaceLister {
	return deviceTemplateRevisionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceTemplateRevisionNamespaceLister helps list and get DeviceTemplateRevisions.
type DeviceTemplateRevisionNamespaceLister interface {
	// List lists all DeviceTemplateRevisions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplateRevision, err error)
	// Get retrieves the DeviceTemplateRevision from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeviceTemplateRevision, error)
	DeviceTemplateRevisionNamespaceListerExpansion
}

// deviceTemplateRevisionNamespaceLister implements the DeviceTemplateRevisionNamespaceLister
// interface.
type deviceTemplateRevisionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceTemplateRevisions in the indexer for a given namespace.
func (s deviceTemplateRevisionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplateRevision, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceTemplateRevision))
	})
	return ret, err
}

// Get retrieves the DeviceTemplateRevision from the indexer for a given namespace and name.
func (s deviceTemplateRevisionNamespaceLister) Get(name string) (*v1alpha1.DeviceTemplateRevision, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicetemplaterevision"), name)
	}
	return obj.(*v1alpha1.DeviceTemplateRevision), nil
}
