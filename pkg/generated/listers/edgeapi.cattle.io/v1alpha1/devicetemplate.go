/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cnrancher/edge-api-server/pkg/apis/edgeapi.cattle.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceTemplateLister helps list DeviceTemplates.
type DeviceTemplateLister interface {
	// List lists all DeviceTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplate, err error)
	// DeviceTemplates returns an object that can list and get DeviceTemplates.
	DeviceTemplates(namespace string) DeviceTemplateNamespaceLister
	DeviceTemplateListerExpansion
}

// deviceTemplateLister implements the DeviceTemplateLister interface.
type deviceTemplateLister struct {
	indexer cache.Indexer
}

// NewDeviceTemplateLister returns a new DeviceTemplateLister.
func NewDeviceTemplateLister(indexer cache.Indexer) DeviceTemplateLister {
	return &deviceTemplateLister{indexer: indexer}
}

// List lists all DeviceTemplates in the indexer.
func (s *deviceTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceTemplate))
	})
	return ret, err
}

// DeviceTemplates returns an object that can list and get DeviceTemplates.
func (s *deviceTemplateLister) DeviceTemplates(namespace string) DeviceTemplateNamespaceLister {
	return deviceTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceTemplateNamespaceLister helps list and get DeviceTemplates.
type DeviceTemplateNamespaceLister interface {
	// List lists all DeviceTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplate, err error)
	// Get retrieves the DeviceTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeviceTemplate, error)
	DeviceTemplateNamespaceListerExpansion
}

// deviceTemplateNamespaceLister implements the DeviceTemplateNamespaceLister
// interface.
type deviceTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceTemplates in the indexer for a given namespace.
func (s deviceTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceTemplate))
	})
	return ret, err
}

// Get retrieves the DeviceTemplate from the indexer for a given namespace and name.
func (s deviceTemplateNamespaceLister) Get(name string) (*v1alpha1.DeviceTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicetemplate"), name)
	}
	return obj.(*v1alpha1.DeviceTemplate), nil
}
